struct plate
  declare file_name
  declare cells_dimension
  declare interval_duration
  declare thermal_diffusivity
  declare epsilon
  declare plate_matrix
  declare k_states

procedure set_plate_matrix(plate)
  declare file_name = plate->file_name
  declare file = fopen(file_name, "rb")

  declare rows
  declare cols

  // Read rows and cols first, store in previously declared variables
  plate->plate_matrix = init_plate_matrix(rows, cols)
  for row := 0 to rows do 
    // Read row and store with fread, col amount of doubles, size of double
  end for

  return 0
end procedure

procedure update_plate(plate)
  declare plate_matrix = plate->plate_matrix
  set_auxiliary(plate_matrix)
  mutable reached_equilibrium := true 
  mutable biggest_change := 0

  for row := 1 to plate_matrix -> rows - 1 do 
    for col := 1 to plate_matrix -> cols - 1 do 
      update_cell(plate_matrix, row, col)

      declare new_temperature = plate_matrix -> matrix[row][col]
      declare old_temperature = plate_matrix -> auxiliary_matrix[row][col]
      declare difference = fabs(new_temperature - old_temperature) 
      if difference > biggest_change do 
        biggest change := difference
      end if
    end for
  end for

  if difference > plate->epsilon do 
    reached_equilibrium := false
  end if

  return reached_equilibrium
end procedure

procedure update_plate_file(plate)
  const file_name = plate->file_name
  declare file := openf(file_name, "wb")
  // Write row and col as first 16 bytes
  for row := 0 to plate->plate_matrix->rows do 
    // Write row, amount of bytes of cols, size of double
  end for
end procedure

procedure set_plate_file_name(plate)
  const last_dot = // Pointer to last dot in parameter

  // Suffix is k_states simulated and .bin extension
  declare suffix := array(25, char)

  // Copy in suffix, "{k_states}.bin"

  // Length of name and directory only
  const name_length = last_dot - plate->file_name

  // Allocate memory for the new filename: name + '-' + suffix + null terminator
  const new_size = name_length + len(suffix) + 2
  declare new_filename := allocate(new_size)

  // In new_file_name, append suffix to filename

  return new_filename
end procedure