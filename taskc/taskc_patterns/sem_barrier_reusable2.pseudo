procedure main()
  // How many threads have arrived to the barrier
  shared count := 0
  // Protects the increment of the count
  shared can_access_count := create_semaphore(1)
  // Locked (0) until all threads arrive, then it is unlocked (1)
  shared barrier_entry := create_semaphore(0)
  shared barrier_exit := create_semaphore(1)
  // Read thread count from standard input
  input shared const thread_count
  // Create a thread team running secondary
  create_threads(thread_count, secondary)
end procedure

procedure secondary()
  Statement A
  // Adapt rendezvous solution here
  // Statement B can be only executed until all threads have run Statement A
  wait(can_access_count)
    count := count + 1
    if (count = thread_count) do
      wait(barrier_exit)
      signal(barrier_entry, thread_count)
    end if
  signal(can_access_count)
  wait(barrier_entry)

  Statement B

  wait(can_access_count)
    count := count - 1
    if (count = 0) do
      wait(barrier_entry)
      signal(barrier_exit, thread_count)
    end if
  signal(can_access_count)
  wait(barrier_exit)
end procedure
